#!/usr/bin/env node
/**
 * Script de prueba para verificar el procesamiento mejorado de lenguaje natural
 */

const http = require('http');

function testEndpoint(path, method = 'GET', data = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'localhost',
            port: 3001,
            path: path,
            method: method,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => {
                body += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonBody = body ? JSON.parse(body) : {};
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: jsonBody
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: body
                    });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

async function testImprovedProcessing() {
    console.log('üß† PRUEBAS DE PROCESAMIENTO MEJORADO');
    console.log('=' .repeat(60));
    
    let testsPassed = 0;
    let totalTests = 0;
    
    // Test 1: Descripci√≥n espec√≠fica con servicios Azure
    totalTests++;
    try {
        const testDescription = 'Necesito una aplicaci√≥n web con App Service, SQL Database y Storage Account para archivos';
        console.log(`\nüîç Test 1: "${testDescription}"`);
        
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log(`‚úÖ Test 1: Generaci√≥n exitosa`);
            console.log(`   üé® Elementos: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron los servicios espec√≠ficos
            const expectedServices = ['azure-app-service', 'azure-sql', 'azure-storage'];
            const detectedServices = data.metadata.detectedServices;
            const hasExpectedServices = expectedServices.every(service => detectedServices.includes(service));
            
            if (hasExpectedServices) {
                console.log(`   ‚úÖ Servicios espec√≠ficos detectados correctamente`);
                testsPassed++;
            } else {
                console.log(`   ‚ö†Ô∏è  Servicios detectados: ${detectedServices.join(', ')}`);
            }
        } else {
            console.log(`‚ùå Test 1: Error en generaci√≥n`);
        }
    } catch (error) {
        console.log(`‚ùå Test 1: Error: ${error.message}`);
    }
    
    // Test 2: Descripci√≥n en espa√±ol con t√©rminos t√©cnicos
    totalTests++;
    try {
        const testDescription = 'Sistema de microservicios con Redis Cache, Service Bus para mensajer√≠a y Application Insights para monitoreo';
        console.log(`\nüîç Test 2: "${testDescription}"`);
        
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log(`‚úÖ Test 2: Generaci√≥n exitosa`);
            console.log(`   üé® Elementos: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron los servicios espec√≠ficos
            const expectedServices = ['azure-redis', 'azure-service-bus', 'azure-monitor'];
            const detectedServices = data.metadata.detectedServices;
            const hasExpectedServices = expectedServices.every(service => detectedServices.includes(service));
            
            if (hasExpectedServices) {
                console.log(`   ‚úÖ Servicios de microservicios detectados correctamente`);
                testsPassed++;
            } else {
                console.log(`   ‚ö†Ô∏è  Servicios detectados: ${detectedServices.join(', ')}`);
            }
        } else {
            console.log(`‚ùå Test 2: Error en generaci√≥n`);
        }
    } catch (error) {
        console.log(`‚ùå Test 2: Error: ${error.message}`);
    }
    
    // Test 3: Descripci√≥n gen√©rica que deber√≠a inferir servicios
    totalTests++;
    try {
        const testDescription = 'Sistema de gesti√≥n de usuarios con base de datos y almacenamiento de archivos';
        console.log(`\nüîç Test 3: "${testDescription}"`);
        
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log(`‚úÖ Test 3: Generaci√≥n exitosa`);
            console.log(`   üé® Elementos: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron servicios b√°sicos
            const detectedServices = data.metadata.detectedServices;
            if (detectedServices.length >= 2) {
                console.log(`   ‚úÖ Servicios inferidos correctamente`);
                testsPassed++;
            } else {
                console.log(`   ‚ö†Ô∏è  Pocos servicios detectados: ${detectedServices.length}`);
            }
        } else {
            console.log(`‚ùå Test 3: Error en generaci√≥n`);
        }
    } catch (error) {
        console.log(`‚ùå Test 3: Error: ${error.message}`);
    }
    
    // Test 4: Descripci√≥n con t√©rminos de AWS que deber√≠a mapear a Azure
    totalTests++;
    try {
        const testDescription = 'Aplicaci√≥n serverless con Lambda functions, RDS database y S3 storage';
        console.log(`\nüîç Test 4: "${testDescription}"`);
        
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log(`‚úÖ Test 4: Generaci√≥n exitosa`);
            console.log(`   üé® Elementos: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron servicios equivalentes
            const detectedServices = data.metadata.detectedServices;
            if (detectedServices.length >= 2) {
                console.log(`   ‚úÖ Servicios equivalentes detectados`);
                testsPassed++;
            } else {
                console.log(`   ‚ö†Ô∏è  Pocos servicios detectados: ${detectedServices.length}`);
            }
        } else {
            console.log(`‚ùå Test 4: Error en generaci√≥n`);
        }
    } catch (error) {
        console.log(`‚ùå Test 4: Error: ${error.message}`);
    }
    
    // Test 5: Descripci√≥n muy espec√≠fica con m√∫ltiples servicios
    totalTests++;
    try {
        const testDescription = 'Arquitectura completa con Virtual Machines, App Service, SQL Database, Storage Account, Redis Cache, Service Bus, Azure Functions, Cosmos DB, Key Vault y Application Insights';
        console.log(`\nüîç Test 5: "${testDescription}"`);
        
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log(`‚úÖ Test 5: Generaci√≥n exitosa`);
            console.log(`   üé® Elementos: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron m√∫ltiples servicios
            const detectedServices = data.metadata.detectedServices;
            if (detectedServices.length >= 8) {
                console.log(`   ‚úÖ M√∫ltiples servicios detectados correctamente`);
                testsPassed++;
            } else {
                console.log(`   ‚ö†Ô∏è  Pocos servicios detectados: ${detectedServices.length}`);
            }
        } else {
            console.log(`‚ùå Test 5: Error en generaci√≥n`);
        }
    } catch (error) {
        console.log(`‚ùå Test 5: Error: ${error.message}`);
    }
    
    // Test 6: Descripci√≥n con t√©rminos t√©cnicos espec√≠ficos
    totalTests++;
    try {
        const testDescription = 'Sistema de procesamiento de datos con NoSQL database, message queues y distributed caching';
        console.log(`\nüîç Test 6: "${testDescription}"`);
        
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log(`‚úÖ Test 6: Generaci√≥n exitosa`);
            console.log(`   üé® Elementos: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron servicios espec√≠ficos
            const detectedServices = data.metadata.detectedServices;
            if (detectedServices.length >= 2) {
                console.log(`   ‚úÖ Servicios t√©cnicos detectados`);
                testsPassed++;
            } else {
                console.log(`   ‚ö†Ô∏è  Pocos servicios detectados: ${detectedServices.length}`);
            }
        } else {
            console.log(`‚ùå Test 6: Error en generaci√≥n`);
        }
    } catch (error) {
        console.log(`‚ùå Test 6: Error: ${error.message}`);
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log(`üéØ RESUMEN DE PRUEBAS: ${testsPassed}/${totalTests} pasaron`);
    
    if (testsPassed === totalTests) {
        console.log('üéâ ¬°Todas las pruebas pasaron! El procesamiento mejorado funciona correctamente.');
        console.log('\nüåê Para probar en la interfaz:');
        console.log('   1. Abre tu navegador en http://localhost:3001');
        console.log('   2. Prueba con estas descripciones:');
        console.log('      ‚Ä¢ "Aplicaci√≥n web con App Service, SQL Database y Storage Account"');
        console.log('      ‚Ä¢ "Sistema de microservicios con Redis Cache y Service Bus"');
        console.log('      ‚Ä¢ "Arquitectura serverless con Azure Functions y Cosmos DB"');
        console.log('   3. Verifica que los servicios se detectan correctamente');
    } else {
        console.log('‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.');
    }
    
    console.log('\nüìù Mejoras implementadas:');
    console.log('   ‚Ä¢ Reconocimiento de patrones m√°s flexible');
    console.log('   ‚Ä¢ An√°lisis por palabras clave y contexto');
    console.log('   ‚Ä¢ Mapeo de servicios equivalentes (AWS ‚Üí Azure)');
    console.log('   ‚Ä¢ Detecci√≥n inteligente de tipos de aplicaci√≥n');
    console.log('   ‚Ä¢ Fallback inteligente para descripciones gen√©ricas');
}

// Ejecutar las pruebas
testImprovedProcessing().catch(console.error);
