#!/usr/bin/env node
/**
 * Script de prueba para verificar que los iconos de Azure se muestran correctamente
 */

const http = require('http');
const fs = require('fs');

function testEndpoint(path, method = 'GET', data = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'localhost',
            port: 3001,
            path: path,
            method: method,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => {
                body += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonBody = body ? JSON.parse(body) : {};
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: jsonBody
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: body
                    });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

async function testIcons() {
    console.log('üé® PRUEBAS DE ICONOS DE AZURE');
    console.log('=' .repeat(50));
    
    let testsPassed = 0;
    let totalTests = 0;
    
    // Test 1: Verificar que el archivo de iconos existe
    totalTests++;
    try {
        if (fs.existsSync('azure-icons.js')) {
            console.log('‚úÖ Test 1: Archivo azure-icons.js existe');
            testsPassed++;
        } else {
            console.log('‚ùå Test 1: Archivo azure-icons.js no encontrado');
        }
    } catch (error) {
        console.log(`‚ùå Test 1: Error verificando archivo: ${error.message}`);
    }
    
    // Test 2: Verificar que el HTML incluye el script de iconos
    totalTests++;
    try {
        const htmlContent = fs.readFileSync('index.html', 'utf8');
        if (htmlContent.includes('azure-icons.js')) {
            console.log('‚úÖ Test 2: HTML incluye script de iconos');
            testsPassed++;
        } else {
            console.log('‚ùå Test 2: HTML no incluye script de iconos');
        }
    } catch (error) {
        console.log(`‚ùå Test 2: Error leyendo HTML: ${error.message}`);
    }
    
    // Test 3: Probar generaci√≥n con m√∫ltiples servicios para verificar iconos
    totalTests++;
    try {
        const testDescription = 'Arquitectura completa con Virtual Machine, App Service, SQL Database, Storage Account, Redis Cache, Service Bus, Azure Functions, Cosmos DB, Key Vault y Application Insights';
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log('‚úÖ Test 3: Generaci√≥n con m√∫ltiples servicios funciona');
            console.log(`   üé® Elementos generados: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones generadas: ${data.metadata.totalConnections}`);
            console.log(`   üè∑Ô∏è  Servicios detectados: ${data.metadata.detectedServices.join(', ')}`);
            
            // Verificar que se detectaron m√∫ltiples servicios
            if (data.metadata.detectedServices.length >= 5) {
                console.log('   ‚úÖ Se detectaron m√∫ltiples servicios correctamente');
                testsPassed++;
            } else {
                console.log('   ‚ö†Ô∏è  Se detectaron pocos servicios');
            }
        } else {
            console.log(`‚ùå Test 3: Generaci√≥n con m√∫ltiples servicios fall√≥`);
        }
    } catch (error) {
        console.log(`‚ùå Test 3: Error en generaci√≥n con m√∫ltiples servicios: ${error.message}`);
    }
    
    // Test 4: Probar con descripci√≥n simple
    totalTests++;
    try {
        const testDescription = 'Una aplicaci√≥n web simple';
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log('‚úÖ Test 4: Generaci√≥n con descripci√≥n simple funciona');
            console.log(`   üé® Elementos generados: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones generadas: ${data.metadata.totalConnections}`);
            testsPassed++;
        } else {
            console.log(`‚ùå Test 4: Generaci√≥n con descripci√≥n simple fall√≥`);
        }
    } catch (error) {
        console.log(`‚ùå Test 4: Error en generaci√≥n simple: ${error.message}`);
    }
    
    // Test 5: Probar con descripci√≥n en espa√±ol
    totalTests++;
    try {
        const testDescription = 'Necesito una m√°quina virtual con base de datos y almacenamiento';
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log('‚úÖ Test 5: Generaci√≥n con descripci√≥n en espa√±ol funciona');
            console.log(`   üé® Elementos generados: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones generadas: ${data.metadata.totalConnections}`);
            testsPassed++;
        } else {
            console.log(`‚ùå Test 5: Generaci√≥n con descripci√≥n en espa√±ol fall√≥`);
        }
    } catch (error) {
        console.log(`‚ùå Test 5: Error en generaci√≥n en espa√±ol: ${error.message}`);
    }
    
    // Test 6: Probar con descripci√≥n que no menciona servicios espec√≠ficos
    totalTests++;
    try {
        const testDescription = 'Sistema de gesti√≥n de usuarios';
        const response = await testEndpoint('/generate-diagram', 'POST', {
            description: testDescription
        });
        
        if (response.statusCode === 200 && response.body.success) {
            const data = response.body.data;
            console.log('‚úÖ Test 6: Generaci√≥n con descripci√≥n gen√©rica funciona');
            console.log(`   üé® Elementos generados: ${data.metadata.totalElements}`);
            console.log(`   üîó Conexiones generadas: ${data.metadata.totalConnections}`);
            testsPassed++;
        } else {
            console.log(`‚ùå Test 6: Generaci√≥n con descripci√≥n gen√©rica fall√≥`);
        }
    } catch (error) {
        console.log(`‚ùå Test 6: Error en generaci√≥n gen√©rica: ${error.message}`);
    }
    
    console.log('\n' + '=' .repeat(50));
    console.log(`üéØ RESUMEN DE PRUEBAS: ${testsPassed}/${totalTests} pasaron`);
    
    if (testsPassed === totalTests) {
        console.log('üéâ ¬°Todas las pruebas pasaron! Los iconos deber√≠an mostrarse correctamente.');
        console.log('\nüåê Para verificar los iconos:');
        console.log('   1. Abre tu navegador en http://localhost:3001');
        console.log('   2. Prueba con diferentes descripciones:');
        console.log('      ‚Ä¢ "Una aplicaci√≥n web con base de datos"');
        console.log('      ‚Ä¢ "Arquitectura de microservicios con Redis y Service Bus"');
        console.log('      ‚Ä¢ "Sistema con m√°quinas virtuales y almacenamiento"');
        console.log('   3. Verifica que los elementos muestran iconos en lugar de solo texto');
    } else {
        console.log('‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.');
    }
    
    console.log('\nüìù Iconos disponibles:');
    console.log('   ‚Ä¢ Virtual Machine, App Service, SQL Database');
    console.log('   ‚Ä¢ Storage Account, Virtual Network, Load Balancer');
    console.log('   ‚Ä¢ Redis Cache, Service Bus, Azure Functions');
    console.log('   ‚Ä¢ Cosmos DB, Key Vault, Application Insights');
}

// Ejecutar las pruebas
testIcons().catch(console.error);
